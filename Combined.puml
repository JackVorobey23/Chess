@startuml
class BlockingStrategyFactory {
    + BlockingStrategyFactory()
    + CreateStrategy(pieceName:PieceName) : IPieceBlockingStrategy
    + RegisteredStrategies : PieceName[] <<get>>
    + RegisterStrategy(pieceName:PieceName, createMethod:Func<IPieceBlockingStrategy>) : void
}
class BoardDirector {
    + BoardDirector(builder:BoardBuilder)
    + Construct() : void
    + GetBoard() : List<Piece>
}
abstract class BoardBuilder {
    + {abstract} BuildPawns() : void
    + {abstract} BuildKnights() : void
    + {abstract} BuildBishops() : void
    + {abstract} BuildRooks() : void
    + {abstract} BuildQueens() : void
    + {abstract} BuildKings() : void
    + {abstract} GetResult() : List<Piece>
}
class CommonBoardBuilder {
    + <<override>> BuildPawns() : void
    + <<override>> BuildKnights() : void
    + <<override>> BuildBishops() : void
    + <<override>> BuildRooks() : void
    + <<override>> BuildQueens() : void
    + <<override>> BuildKings() : void
    + <<override>> GetResult() : List<Piece>
}
class CastlingWorker {
    + CastlingWorker(board:List<Piece>, move:string, moves:string)
    + CastleIsPossible() : bool
    + MakeCastle() : List<Piece>
}
class CheckIterator {
    + CheckIterator()
    + Current : Func<List<Piece>, PieceColor, BlockingStrategyFactory, Piece> <<get>>
    + MoveNext() : bool
    + Reset() : void
    + AddCheckFunction(checkFunction:Func<List<Piece>, PieceColor, BlockingStrategyFactory, Piece>) : void
    + Dispose() : void
}
class ChecksCollection {
    + ChecksCollection()
    + GetEnumerator() : IEnumerator<Func<List<Piece>, PieceColor, BlockingStrategyFactory, Piece>>
}
class ChessDataBase {
    + ChessDataBase(options:DbContextOptions<ChessDataBase>)
    + Players : DbSet<Player> <<get>> <<set>>
    + Games : DbSet<Game> <<get>> <<set>>
}
class Game {
    + GameId : int <<get>> <<set>>
    + WhitePlayerId : int <<get>> <<set>>
    + BlackPlayerId : int <<get>> <<set>>
    + Moves : string <<get>> <<set>>
    + Board : string <<get>> <<set>>
    + WinnerColor : PieceColor? <<get>> <<set>>
    + Game(gameId:int, whitePlayerId:int, blackPlayerId:int, board:string)
}
class GameDto {
    + BPieceUserId : int <<get>> <<set>>
    + WPieceUserId : int <<get>> <<set>>
    + GameId : int <<get>> <<set>>
    + Pieces : List<Piece> <<get>> <<set>>
    + GameDto(wPieceUserId:int, bPieceUserId:int, gameId:int, pieces:List<Piece>)
}
class GameHub {
    + GameHub(playerRepositpry:IRepository<Player>, gameRepository:IRepository<Game>, factory:BlockingStrategyFactory)
    + <<async>> AskServer(text:string) : Task
    + <<async>> AddWaiter(playerName:string, playerId:int) : Task
    + <<async>> MakeMove(gameId:int, Move:string) : Task
    + <<async>> EndGame(gameId:int, LoserId:int) : Task
}
interface IGetChecksStrategy {
}
class GetDiagonalCheck {
    + IsKingUnderCheck(board:List<Piece>, kingColor:PieceColor, factory:BlockingStrategyFactory) : Piece
}
class GetLineCheck {
    + IsKingUnderCheck(board:List<Piece>, kingColor:PieceColor, factory:BlockingStrategyFactory) : Piece
}
class GetKnightCheck {
    + IsKingUnderCheck(board:List<Piece>, kingColor:PieceColor, factory:BlockingStrategyFactory) : Piece
}
interface IPieceBlockingStrategy {
    
    + PieceIsNotBlocking(Piece piece, string move, List<Piece> board) : bool
}
class PawnIsNotBlockingStrategy {
    + PieceIsNotBlocking(piece:Piece, move:string, board:List<Piece>) : bool
}
class KnightIsNotBlockingStrategy {
    + PieceIsNotBlocking(piece:Piece, move:string, board:List<Piece>) : bool
}
class RookIsNotBlockingStrategy {
    + PieceIsNotBlocking(piece:Piece, move:string, board:List<Piece>) : bool
}
class BishopIsNotBlockingStrategy {
    + PieceIsNotBlocking(piece:Piece, move:string, board:List<Piece>) : bool
}
class QueenIsNotBlockingStrategy {
    + PieceIsNotBlocking(piece:Piece, move:string, board:List<Piece>) : bool
}
class KingIsNotBlockingStrategy {
    + PieceIsNotBlocking(piece:Piece, move:string, board:List<Piece>) : bool
}
interface "IRepository`1"<TEntity> {
}
class KingUnderCheck {
    + KingUnderCheck(checks:List<Piece>, board:List<Piece>)
    + MateOnBoard() : bool
}
interface ISubject {
}
class MoveAllowed {
    + MoveAllowed(board:List<Piece>, factory:BlockingStrategyFactory)
    + MoveAllowedRequest(piece:Piece, move:string) : bool
    + CheckAllowedRequest(piece:Piece, move:string) : bool
}
class MoveDto {
    + GameId : int <<get>> <<set>>
    + Pieces : List<Piece> <<get>> <<set>>
    + MoveDto(gameId:int, pieces:List<Piece>)
}
abstract class MoveHandler {
    + MoveHandler(board:List<Piece>)
    + SetNextHandler(handler:MoveHandler) : void
    + <<virtual>> HandleMove(piece:Piece, move:string) : bool
    + <<virtual>> MoveAllowedRequest(piece:Piece, move:string) : bool
}
class BlockingPieceHandler {
    + BlockingPieceHandler(board:List<Piece>, factory:BlockingStrategyFactory)
    + <<override>> HandleMove(piece:Piece, move:string) : bool
    + <<override>> MoveAllowedRequest(piece:Piece, move:string) : bool
}
class KingSafetyHandler {
    + KingSafetyHandler(board:List<Piece>, factory:BlockingStrategyFactory)
    + <<override>> HandleMove(piece:Piece, move:string) : bool
    + <<override>> MoveAllowedRequest(piece:Piece, move:string) : bool
}
class Piece {
    + PieceName : PieceName <<get>> <<set>>
    + PiecePosition : string <<get>> <<set>>
    + PieceColor : PieceColor <<get>> <<set>>
    + Piece(pieceName:PieceName, piecePosition:string, pieceColor:PieceColor)
}
enum PieceName {
    Pawn,
    Knight,
    Bishop,
    Rook,
    Queen,
    King,
}
enum PieceColor {
    White,
    Black,
}
class Player {
    + PlayerId : int <<get>> <<set>>
    + FullName : string <<get>> <<set>>
    + Games : List<Game> <<get>> <<set>>
    + Rating : int <<get>> <<set>>
    + IsWaiting : bool <<get>> <<set>>
    + Player(playerId:int, fullName:string, rating:int)
}
class "Repository`1"<T> {
    + Repository(context:ChessDataBase)
    + <<async>> Add(entity:T) : Task<T>
    + <<async>> FindById(id:int) : Task<T>
    + <<async>> GetAll() : Task<IEnumerable<T>>
    + <<async>> Remove(entity:T) : Task
    + <<async>> Update(entity:T) : Task<T>
}
BoardBuilder <|-- CommonBoardBuilder
"IEnumerator`1" "<Func<List<Piece>, PieceColor, BlockingStrategyFactory, Piece>>" <|-- CheckIterator
"IEnumerable`1" "<Func<List<Piece>, PieceColor, BlockingStrategyFactory, Piece>>" <|-- ChecksCollection
DbContext <|-- ChessDataBase
Hub <|-- GameHub
IGetChecksStrategy <|-- GetDiagonalCheck
IGetChecksStrategy <|-- GetLineCheck
IGetChecksStrategy <|-- GetKnightCheck
IPieceBlockingStrategy <|-- PawnIsNotBlockingStrategy
IPieceBlockingStrategy <|-- KnightIsNotBlockingStrategy
IPieceBlockingStrategy <|-- RookIsNotBlockingStrategy
IPieceBlockingStrategy <|-- BishopIsNotBlockingStrategy
IPieceBlockingStrategy <|-- QueenIsNotBlockingStrategy
IPieceBlockingStrategy <|-- KingIsNotBlockingStrategy
ISubject <|-- MoveAllowed
ISubject <|-- MoveHandler
MoveHandler <|-- BlockingPieceHandler
MoveHandler <|-- KingSafetyHandler
"IRepository`1" "<T>" <|-- "Repository`1"
@enduml
